(define (value-of e env1)
  (cases expression e
    (const-exp (n)
      (num-val n))
    (var-exp (v)
      (apply-env env1 v))
    (zero?-exp (e)
      (bool-val (zero? (expval->num (value-of e env1)))))
    (diff-exp (e1 e2)
      (num-val (- (expval->num (value-of e1 env1))
                  (expval->num (value-of e2 env1)))))
    (if-exp (cond-e true-e false-e)
      (if (expval->bool (value-of cond-e env1))
        (value-of true-e env1)
        (value-of false-e env1)))
    (let-exp (v e1 e2)
      (value-of e2 (extend-env v (value-of e1 env1) env1)))
    (proc-exp (v e1)
      (proc-val (procedure v e1 env1)))
    (call-exp (e1 e2)
      (apply-procedure
       (expval->proc (value-of e1 env1))
       (value-of e2 env1)))
    ))
